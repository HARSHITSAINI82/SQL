create database assignment_1;
use assignment_1;



-- --Q17.
-- --Table: Product
-- --product_id is the primary key of this table.
-- --Each row of this table indicates the name and the price of each
-- product.
create table if not exists Product
(
product_id int NOT NULL,
product_name varchar(50),
unit_price int,
constraint pk PRIMARY KEY (product_id)
);
insert into Product values(1,'S8',1000);
insert into Product values(2,'G4',800);
insert into Product values(3,'iPhone',1400);
select * from Product;
-- --Table: Sales
create table if not exists Sales
(
seller_id int,
product_id int,
buyer_id int,
sale_date date,
quantity int,
price int,
constraint fk FOREIGN KEY (product_id) REFERENCES
Product(product_id)
);


insert into Sales values(1,1,1,'2019-01-21',2,2000);
insert into Sales values(1,2,2,'2019-02-17',1,800);
insert into Sales values(2,2,3,'2019-06-02',1,800);
insert into Sales values(3,3,4,'2019-05-13',2,2800);
select * from Sales;

-- --Write an SQL query that reports the products that were only sold in
-- the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31
-- inclusive.
-- --Explanation:
-- --The product with id 1 was only sold in the spring of 2019.
-- --The product with id 2 was sold in the spring of 2019 but was also
-- sold after the spring of 2019.
-- --The product with id 3 was sold after spring 2019.
-- --We return only product 1 as it is the product that was only sold in
-- the spring of 2019


select*from product;
select*from sales;

select product_name , product_id , unit_price
from product
where product_id not in (select product_id 
						from sales 
						where sale_date not between '2019-01-01'  and '2019-03-31'
						);

-- -Q18.
-- --Table: Views
create table if not exists Views
(
article_id int,
author_id int,
viewer_id int,
view_date date
);
insert into Views VALUES (1,3,5,'2019-08-01'),
(1,3,6,'2019-08-02'),(2,7,7,'2019-08-01'),(2,7,6,'2019-08-02'),
(4,7,1,'2019-07-22'), (3,4,4,'2019-07-21'),(3,4,4,'2019-07-21');
select * from Views;
-- --There is no primary key for this table, it may have duplicate rows.
-- --Each row of this table indicates that some viewer viewed an article
-- (written by some author) on some date.
-- --Note that equal author_id and viewer_id indicate the same person.
-- --Write an SQL query to find all the authors that viewed at least one
-- of their own articles.
-- --Return the result table sorted by id in ascending order.
-- --The query result format is in the following example


select distinct(author_id) from views 
where author_id = viewer_id
order by author_id ;





-- --Q19.
-- --Table: Delivery
create table if not exists Delivery
(
delivery_id int not null,
customer_id int,
order_date date,
customer_pref_delivery_date date,
constraint pk PRIMARY KEY (delivery_id)
);
insert into Delivery values
(1,1,'2019-08-01','2019-08-02'),(2,5,'2019-08-02','2019-08-02'),(3,1,'2019-08-11','2019-08-11'),
(4,3,'2019-08-24','2019-08-26'),(5,4,'2019-08-21','2019-08-22'),(6,2,'2019-08-11','2019-08-13');
select * from Delivery;









-- --The table holds information about food delivery to customers that
-- make orders at some date and
-- --specify a preferred delivery date (on the same order date or after
-- it).
-- --If the customer's preferred delivery date is the same as the order
-- date, then the order is called immediately; otherwise, it is called
-- scheduled.
-- --Write an SQL query to find the percentage of immediate orders in the
-- table, rounded to 2 decimal places.
-- --The query result format is in the following example.

select * from delivery;

select round(100*d2.immi/count(d.delivery_id),2) as immidiate_percentage
from delivery d, 
(select count(delivery_id) as immi from delivery d2
where customer_pref_delivery_date = order_date) d2; 


-- -Q20.
-- --Table: Ads
create table if not exists Ads
(
ad_id int,
user_id int,
action enum('Clicked', 'Viewed', 'Ignored'),
constraint pk PRIMARY KEY (ad_id, user_id)
);
insert into Ads VALUES
(1,1,'Clicked'),(2,2,'Clicked'),(3,3,'Viewed'),(5,5,'Ignored'),(1,7,'Ignored'),(2,7,'Viewed'),
(3,5,'Clicked'),(1,4,'Viewed'),(2,11,'Viewed'),(1,2,'Clicked');
select * from Ads;
-- --Write an SQL query to find the ctr of each Ad. Round ctr to two
-- decimal points.
-- --Return the result table ordered by ctr in descending order and by
-- ad_id in ascending order in case of a tie.

select ifnull(
				round(
							avg(
								case 
								when action='Clicked' then 1
								when action ='Viewed' then 0
								else null
                                end 
								)*100
													
							,2)
				,0) as ctr 
from ads 
group by ad_id
order by ctr desc , ad_id asc;


select 	avg (
		case 
		when action='Clicked' then 1
		when action ='Viewed' then 0
		else null
		end 
		)*100 as ctr 
from ads 
group by ad_id;


-- -Q21.
-- --Table: Employee
create table if not exists Employee
(
employee_id int,
team_id int,
constraint pk PRIMARY KEY (employee_id)
);
insert into Employee VALUES(1,8),(2,8),(3,8),(4,7),(5,9),(6,9);
select * from Employee;
-- --Write an SQL query to find the team size of each of the employees.
-- --Return result table in any order

select  employee_id , count(*) over (partition by team_id) as team_size  
from employee
order by team_size desc;



-- --Q22.
-- --Table: Countries
create table if not exists Countries
(
country_id int not null,
country_name varchar(50),
constraint pk PRIMARY KEY (country_id)
);
insert into Countries VALUES
(2,'USA'),(3,'Australia'),(7,'Peru'),(5,'China'),(8,'Morocco'),(9,'Spain');
select * from Countries;
-- --Table: Weather
create table if not exists Weather
(
country_id int,
weather_state int,
day date,
constraint pk PRIMARY KEY (country_id, day)
);
insert into Weather VALUES
(2,15,'2019-11-01'),(2,12,'2019-10-28'),(2,12,'2019-10-27'),(3,-2,'2019-11-10'),(3,0,'2019-11-11'),
(3,3,'2019-11-12'),(5,16,'2019-11-07'),(5,18,'2019-11-09'),(5,21,'2019-11-23'),(7,25,'2019-11-28'),
(7,22,'2019-12-01'),(7,20,'2019-12-02'),(8,25,'2019-11-05'),(8,27,'2019-11-15'),
(8,31,'2019-11-25'),(9,7,'2019-10-23'),(9,3,'2019-12-23');
select * from Weather;
-- --Write an SQL query to find the type of weather in each country for
-- November 2019.
-- --The type of weather is:
-- --● Cold if the average weather_state is less than or equal 15,
-- --● Hot if the average weather_state is greater than or equal to 25,
-- and
-- --● Warm otherwise.
-- --Return result table in any order.


select c.country_name , 
							case
                            when avg (w.weather_state) <= 15 then 'cold'
                            when avg (w.weather_state) >= 25 then 'hot'
                            else 'warm'
                            end weather_typre
from countries c
inner join weather w on w.country_id = c.country_id
where w.day between '2019-11-01' and '2019-11-30'
group by c.country_id;


-- --Q23.
-- --Table: Prices
create table if not exists Prices
(
product_id int,
start_date date,
end_date date,
price int,
constraint pk PRIMARY KEY (product_id, start_date, end_date)
);
insert into Prices VALUES
(1,'2019-02-17','2019-02-28',5),(1,'2019-03-01','2019-03-22',20),(2,'2019-02-01','2019-02-20',15),
(2,'2019-02-21','2019-03-31',30);
select * from Prices;
-- --Table: UnitsSold
create table if not exists UnitsSold
(
product_id int,
purchase_date date,
units int
);
insert into UnitsSold VALUES
(1,'2019-02-25',100),(1,'2019-03-01',15),(2,'2019-02-10',200),(2,'2019-03-22',30);
select * from UnitsSold;
-- --Write an SQL query to find the average selling price for each
-- product. average_price should be rounded to 2 decimal places.
-- --Return the result table in any order


select a.product_id , round(sum(a.units*b.price)/sum(a.units),2) as percentage
from UnitsSold a 
join prices b on b.product_id = a.product_id
group by product_id; 



select a.product_id , round(sum(a.units*b.price)/sum(a.units),2) as percentage
from UnitsSold a 
join prices b on b.product_id = a.product_id
where b.start_date <= a.purchase_date and b.end_date >= a.purchase_date
group by product_id; 


-- --Q24.
-- --Table: Activity
create table if not exists Activity
(
player_id int,
device_id int,
event_date date,
games_played INT DEFAULT 0,
constraint pk PRIMARY KEY (player_id, event_date)
);

INSERT into Activity values
(1,2,'2016-03-01',5),(1,2,'2016-05-02',6),(2,3,'2017-06-25',1),(3,1,'2016-03-02',0),
(3,4,'2018-07-03',5);

select *from activity;

select player_id, event_date as first_login,
row_number() over (partition by player_id) as row_num
from activity;


select temp.player_id , temp.event_date as first_login 
from (select *,
		row_number() over (partition by player_id) as row_num from activity ) temp
where temp.row_num = 1 ;

-- --USING CTE METHOD  
with first_login as
(select player_id, event_date as first_login,
row_number() over (partition by player_id) as row_num from activity)
select * from first_login where row_num = 1; 

-- Write an SQL query to report the device that is first logged in for each player.
-- Return the result table in any order.
-- The query result format is in the following example.

with first_login as
(select player_id, event_date as first_login, device_id as first_login_device,
row_number() over (partition by player_id) as row_num from activity)
select player_id , first_login , firsT_login_device  from first_login where row_num = 1; 


use assignment_1;

-- --Q26.
-- --Table: Products
create table if not exists Products
(
product_id int,
product_name VARCHAR(50),
product_category VARCHAR(50),
constraint pk PRIMARY KEY (product_id)
);


insert into Products values (1,'Leetcode Solutions','Book'),(2,'Jewels of Stringology','Book'),
(3,'HP','Laptop'),(4,'Lenovo','Laptop'),(5,'Leetcode Kit','T-shirt');
select * from Products;

-- --Table: Orders
create table if not exists Orders
(
product_id int,
order_date date,
unit int,
constraint fkk FOREIGN KEY (product_id) REFERENCES
Products(product_id)
);

insert into Orders values
(1,'2020-02-05',60),(1,'2020-02-10',70),(2,'2020-01-18',30),(2,'2020-02-11',80),(3,'2020-02-17',2),
(3,'2020-02-24',3),(4,'2020-03-01',20),(4,'2020-03-04',30),(4,'2020-03-04',60),(5,'2020-02-25',50),
(5,'2020-02-27',50),(5,'2020-03-01',50);
select * from Orders;
-- --Write an SQL query to get the names of products that have at least
-- 100 units ordered in February 2020 and their amount.
-- --Return result table in any order.

select * from orders;
select * from products;


select p.product_name , p.product_category , p.product_id, sum(o.unit) as units
from products p 
join orders o on o .product_id = p.product_id
where o.order_date between '2020-02-01' and '2020-02-29'
group by o.product_id
having sum(o.unit) >= 100;




-- --Q27.
-- --Table: Users
create table if not exists Users
(
user_id int,
name varchar(50),
mail varchar(50),
constraint pk PRIMARY KEY (user_id)
);
insert into Users VALUES
(1,'Winston','winston@leetcode.com'),(2,'Jonathan','jonathanisgreat'),(3,'Annabelle','bella-@leetcode.com'),
(4,'Sally','sally.come@leetcode.com'),(5,'Marwan','quarz#2020@leetcode.com'),(6,'David','david69@gmail.com'),
(7,'Shapiro','.shapo@leetcode.com');
select * from Users;
-- --Write an SQL query to find the users who have valid emails.
-- --A valid e-mail has a prefix name and a domain where:
-- --● The prefix name is a string that may contain letters (upper or
-- lower case), digits, underscore
-- --'_', period '.', and/or dash '-'. The prefix name must start with a
-- letter.
-- --● The domain is '@leetcode.com'.
-- --Return the result table in any order.


select * from users  

where regexp_like (mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com');



-- --Q28.
-- --Table: Customers
create table if not exists Customers
(
customer_id int,
name varchar(50),
country varchar(50),
constraint pk PRIMARY KEY (customer_id)
);
insert into Customers VALUES
(1,'Winston','USA'),(2,'Jonathan','Peru'),(3,'Moustafa','Egypt');
select * from Customers;


-- --Table: Produc
create table if not exists Produc
(
product_id int,
description varchar(255),
price int,
constraint pk PRIMARY KEY (product_id)
);
insert into Produc values (10,'LC Phone',300),(20,'LCT-Shirt',10),(30,'LC Book',45),(40,'LC Keychain',2);
select * from Produc;


-- --Table: Orderr
create table if not exists Orderr
(
order_id int,
customer_id int,
product_id int,
order_date DATE,
quantity int,
constraint pk PRIMARY KEY (order_id)
);



insert into Orderr VALUES
(1,1,10,'2020-06-10',1),(2,1,20,'2020-07-01',1),(3,1,30,'2020-07-08',2),(4,2,10,'2020-06-15',2),
(5,2,40,'2020-07-01',10),(6,3,20,'2020-06-24',2),
(7,3,30,'2020-06-25',2),(9,3,30,'2020-05-08',3);
select * from Orderr;



-- Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.
-- Return the result table in any order.
-- The query result format is in the following example
select * from Produc;
select * from Orderr;
select * from Customers;

select o.customer_id ,c.name 
from customers c, produc p , orderr o 
where c.customer_id = o.customer_id and o.product_id = p.product_id
group by o.customer_id
having ( 
sum(case when order_date like '2020-06-%' then o.quantity*p.price else 0 end) >=100
and
sum(case when order_date like '2020-07-%' then o.quantity*p.price else 0 end) >=100
);


-- --Q29.
-- --Table: TVProgram
create table if not exists TVProgram
(
program_date date,
content_id int,
channel varchar(50),
constraint pk PRIMARY KEY (program_date, content_id)
);
insert into TVProgram VALUES ('2020-06-10 08:00',1,'LC-Channel'),('2020-05-11 12:00',2,'LC-Channel'),
('2020-05-12 12:00',3,'LC-Channel'),('2020-05-13 14:00',4,'Disney Ch'),
('2020-06-18 14:00',4,'Disney Ch'),('2020-07-15 16:00',5,'Disney Ch');
select * from TVProgram;



-- --Table: Content
create table if not exists Content
(
content_id varchar(50),
title varchar(50),
Kids_content enum('Y','N'),
content_type varchar(50),
constraint pk PRIMARY KEY (content_id)
);
insert into Content VALUES (1,'Leetcode Movie','N','Movies'),(2,'Alg.for Kids','Y','Series'),
(3,'DatabaseSols','N','Series'),(4,'Aladdin','Y','Movies'),
(5,'Cinderella','Y','Movies');
select * from Content;
-- --Write an SQL query to report the distinct titles of the kid-friendly
-- movies streamed in June 2020.
-- --Return the result table in any order.

select distinct title 
from content ctt
inner join TVProgram t on t.content_id = ctt.content_id
where ctt.content_type = 'movies'
and ctt.kids_content = 'y'
and t.program_date like '2020-06-%';


