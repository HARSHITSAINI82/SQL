create database sql_class_4;
use  sql_class_4;
CREATE TABLE Orders (
    OrderID INT,
    ProductID INT,
    ProductName VARCHAR(255),
    Quantity INT
);

INSERT INTO Orders VALUES 
(1, 101, 'Apple', 10),
(2, 102, 'Banana', 20),
(3, 103, 'Cherry', 30),
(4, 104, 'Date', 40),
(5, 105, 'Elderberry', 50);

select*from orders;

-- USE OF IN OR NOT IN OPERATOR 
select*from orders where productname in ('apple','banana');

select*from orders where productname not in ('apple','banana');

# Any Operation 


CREATE TABLE Students (
    StudentID INT,
    StudentName VARCHAR(50)
);
INSERT INTO Students VALUES 
(1, 'John'),
(2, 'Alice'),
(3, 'Bob');

CREATE TABLE Courses (
    CourseID INT,
    CourseName VARCHAR(50)
);
INSERT INTO Courses VALUES 
(100, 'Math'),
(101, 'English'),
(102, 'Science');


CREATE TABLE Enrollments (
    StudentID INT,
    CourseID INT
);

INSERT INTO Enrollments VALUES 
(1, 100),
(1, 101),
(2, 101),
(2, 102),
(3, 100),
(3, 102);

select *from enrollments;
select *from courses;
select*from students;

-- Example: Let's find the students who are enrolled in any course taken by 'John':
select s.StudentName from students s
join 
enrollments e on e.StudentID = s.StudentID
where e.CourseID = any(
						select e.CourseID from enrollments e
                        join students s on s.StudentID = e.StudentID
                        where StudentName = 'john');
-- all usecase  

CREATE TABLE Products (
    ProductID INT,
    ProductName VARCHAR(50),
    Price DECIMAL(5,2)
);
INSERT INTO Products VALUES 
(1, 'Apple', 1.20),
(2, 'Banana', 0.50),
(3, 'Cherry', 2.00),
(4, 'Date', 1.50),
(5, 'Elderberry', 3.00);

CREATE TABLE Orders_all (
    OrderID INT,
    ProductID INT,
    Quantity INT
);
INSERT INTO Orders_all VALUES 
(1001, 1, 10),
(1002, 2, 20),
(1003, 3, 30),
(1004, 1, 5),
(1005, 4, 25),
(1006, 5, 15);

select*from products;
select*from orders_all;

-- Now, suppose we want to find the products that have a price less than the price of all products ordered in order 1001:
SELECT p.ProductName, o.Quantity
FROM Products p
INNER JOIN Orders_all o ON p.ProductID = o.ProductID
WHERE p.Price < ALL (
    SELECT pr.Price
    FROM Products pr
    INNER JOIN Orders_all o ON pr.ProductID = o.ProductID
    WHERE o.OrderID = 1001
);
-- Question 1: Find products that have a price higher than all the products in the 'Electronics' category.
CREATE TABLE Products_V (
    ProductID INT,
    ProductName VARCHAR(50),
    Category VARCHAR(50),
    Price DECIMAL(5,2)
);

INSERT INTO Products_V VALUES 
(1, 'Laptop', 'Electronics', 800.00),
(2, 'TV', 'Electronics', 600.00),
(3, 'Shirt', 'Clothing', 25.00),
(4, 'Tablet', 'Electronics', 300.00),
(5, 'Dress', 'Clothing', 50.00);

SELECT*FROM products_v;

select price from products_V
where Category = 'Electronics';


select *from products_v 
where price < all( 	
				select price from products_V
					where Category = 'Electronics');
 CREATE TABLE Employees (
    EmployeeID INT,
    EmployeeName VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(8,2)
);

INSERT INTO Employees VALUES 
(1, 'Ella', 'Sales', 50000.00),
(2, 'Frank', 'Marketing', 48000.00),
(3, 'Grace', 'Sales', 55000.00),
(4, 'Henry', 'Finance', 60000.00),
(5, 'Isabel', 'Sales', 52000.00);


select * from Employees ;
select*from Employees 
where Salary > all
					(select salary from Employees
                    where Department = 'Sales');
-- Question 2 (Simplified): Find orders that have a greater quantity than all orders placed by 'CustomerA'.                    
                    
CREATE TABLE Customers (
    CustomerID INT,
    CustomerName VARCHAR(50)
);

CREATE TABLE Orders_f (
    OrderID INT,
    CustomerID INT,
    Quantity INT
);

INSERT INTO Customers VALUES 
(1, 'CustomerA'),
(2, 'CustomerB'),
(3, 'CustomerC');

INSERT INTO Orders_f VALUES 
(1001, 1, 15),
(1002, 1, 20),
(1003, 2, 10),
(1004, 2, 25),
(1005, 3, 18);


use sql_class_4;
select *from orders_f;
select*from Customers;

select Quantity,OrderID  from orders_f 
where Quantity > all(select Quantity from orders_f 
					where CustomerID =1);

-- Question 3: Find students who have passed all subjects in a semester (passing grade is 50 or more).
CREATE TABLE Student (
    StudentID INT,
    StudentName VARCHAR(50)
);

CREATE TABLE Results (
    StudentID INT,
    Subject VARCHAR(50),
    Marks INT,
    Semester VARCHAR(50)
);

INSERT INTO Student VALUES 
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie');

INSERT INTO Results VALUES 
(1, 'Math', 75, 'Spring 2023'),
(1, 'English', 60, 'Spring 2023'),
(2, 'Math', 45, 'Spring 2023'),
(2, 'English', 55, 'Spring 2023'),
(3, 'Math', 65, 'Spring 2023'),
(3, 'English', 70, 'Spring 2023');


select *from student;
select *from results;

select s.StudentID , s.StudentName 
from student s
where 50<= all(select marks from results r
				where  s.StudentID = r.StudentID);
                
-- # EXISTS Operation

CREATE TABLE Customerss (
    CustomerID INT,
    CustomerName VARCHAR(50)
);
INSERT INTO Customerss VALUES 
(1, 'John Doe'),
(2, 'Alice Smith'),
(3, 'Bob Johnson'),
(4, 'Charlie Brown'),
(5, 'David Williams');		

CREATE TABLE Orders_fuck (
    OrderID INT,
    CustomerID INT,
    OrderDate DATE
);

INSERT INTO Orders_fuck VALUES 
(1001, 1, '2023-01-01'),
(1002, 2, '2023-02-01'),
(1003, 1, '2023-03-01'),
(1004, 3, '2023-04-01'),
(1005, 5, '2023-05-01');

select * from customerss;
select *from orders_fuck;

-- Example: Let's find the customers who have placed at least one order.
select c.CustomerName from 
customerss c 

where exists (select 1 from orders_fuck o  where  c.CustomerID = o.CustomerID);

-- # NOT EXISTS Operation

-- Example: Let's find the customers who have not placed any orders.
select c.CustomerName from 
customerss c 

where  not exists (select 1 from orders_fuck o  where  c.CustomerID = o.CustomerID);


-- # Window Functions

create table shop_sales_data
(
sales_date date,
shop_id varchar(5),
sales_amount int
);

insert into shop_sales_data values('2022-02-14','S1',200);
insert into shop_sales_data values('2022-02-15','S1',300);
insert into shop_sales_data values('2022-02-14','S2',600);
insert into shop_sales_data values('2022-02-15','S3',500);
insert into shop_sales_data values('2022-02-18','S1',400);
insert into shop_sales_data values('2022-02-17','S2',250);
insert into shop_sales_data values('2022-02-20','S3',300);

select *from shop_sales_data;

-- # Total count of sales for each shop using window function
-- # Working functions - SUM(), MIN(), MAX(), COUNT(), AVG()


# If we only use Order by In Over Clause

select *, 
sum(sales_amount) over (order by sales_date desc) as running_sum_of_sales from shop_sales_data;

# If we only use Partition By

select *,
sum(sales_amount) over (partition by shop_id) as running_shop_id from shop_sales_data;

# If we only use Partition By annd order by 

select *, 
sum(sales_amount) over (partition by shop_id order by sales_amount asc) as running_sum_sales from shop_sales_data;

select *,
       sum(sales_amount) over(partition by shop_id order by sales_amount desc) as running_sum_of_sales
from shop_sales_data;

select *,


sum(sales_amount) over(partition by shop_id order by sales_amount desc) as running_sum_of_sales,
avg(sales_amount) over(partition by shop_id order by sales_amount desc) as running_avg_of_sales,
max(sales_amount) over(partition by shop_id order by sales_amount desc) as running_max_of_sales from shop_sales_data;


create table amazon_sales_data
(
    sales_date date,
    sales_amount int
);

insert into amazon_sales_data values('2022-08-21',500);
insert into amazon_sales_data values('2022-08-22',600);
insert into amazon_sales_data values('2022-08-19',300);

insert into amazon_sales_data values('2022-08-18',200);

insert into amazon_sales_data values('2022-08-25',800);



-- # Query - Calculate the date wise rolling average of amazon sales
select * from amazon_sales_data;


select *, 
avg(sales_amount) over (order by sales_date ) as running_average from amazon_sales_data;

select *,
sum(sales_amount) over (order by sales_date ) as running_sum , 
avg(sales_amount) over (order by sales_date ) as running_average from amazon_sales_data;


-- # Rank(), Row_Number(), Dense_Rank() window functions

select*from shop_sales_data;
insert into shop_sales_data values('2022-02-19','S1',400);
insert into shop_sales_data values('2022-02-20','S1',400);
insert into shop_sales_data values('2022-02-22','S1',300);
insert into shop_sales_data values('2022-02-25','S1',200);
insert into shop_sales_data values('2022-02-15','S2',600);
insert into shop_sales_data values('2022-02-16','S2',600);
insert into shop_sales_data values('2022-02-16','S3',500);
insert into shop_sales_data values('2022-02-18','S3',500);
insert into shop_sales_data values('2022-02-19','S3',300);
select*from shop_sales_data;

-- # Rank(), Row_Number(), Dense_Rank() window functions


select * ,
row_number () over (partition by shop_id order by sales_amount desc ) as running_row_number,
rank() over (partition by shop_id order by sales_amount desc ) as running_row,
dense_rank() over (partition by shop_id order by sales_amount desc ) as running_dence_number
from shop_sales_data;

create table workers
(
    emp_id int,
    salary int,
    dept_name VARCHAR(30)

);
use sql_class_4;
insert into workers values(1,10000,'Software');
insert into workers values(2,11000,'Software');
insert into workers values(3,11000,'Software');
insert into workers values(4,11000,'Software');
insert into workers values(5,15000,'Finance');
insert into workers values(6,15000,'Finance');
insert into workers values(7,15000,'IT');
insert into workers values(8,12000,'HR');
insert into workers values(9,12000,'HR');
insert into workers values(10,11000,'HR');
select * from workers;

# Query - get one employee from each department who is getting maximum salary (employee can be random if salary is same)
select 
temp.*
from ( select*,
		row_number() over (partition by dept_name order by salary desc) as row_num
        from workers) temp
where temp.row_num = 1;

 
# Query - get all employees from each department who are getting maximum salary
select 
temp.*
from (select *,		
	 rank()  over (partition by dept_name order by salary ) as ranks
     from workers) temp
where temp.ranks = 1;


select 
temp.*
from (select * ,
		dense_rank() over (partition by dept_name order by salary desc ) as d_rank
        from workers ) temp
where temp.d_rank = 1;
                   
                    
select 
temp.*
from ( select*,
		row_number() over (partition by dept_name order by salary desc) as row_num
        from workers) temp;
        
select 
temp.*
from (select *,		
	 rank()  over (partition by dept_name order by salary desc
     ) as ranks
     from workers) temp
where temp.ranks =1 ;

# Query - get all top 2 ranked employees from each department who are getting maximum salary
select temp.* 
from ( select *,
		dense_rank() over (partition by dept_name order by salary desc) as ranks
        from workers ) temp 
where temp.ranks <=2;


# Example for lag and lead
create table daily_sales
(
sales_date date,
sales_amount int
);

insert into daily_sales values('2022-03-11',400);
insert into daily_sales values('2022-03-12',500);
insert into daily_sales values('2022-03-13',300);
insert into daily_sales values('2022-03-14',600);
insert into daily_sales values('2022-03-15',500);
insert into daily_sales values('2022-03-16',200);


select*from daily_sales;

select *,
lag(sales_amount,1) over (order by sales_date desc ) as fuck 
from daily_sales;


select *,
lead(sales_amount,1) over (order by sales_date desc ) as fuck_you 
from daily_sales;


select *,
lead(sales_amount,2) over (order by sales_date desc ) as fuck_you 
from daily_sales;

select*,
lag(sales_amount,1) over (order by sales_date desc) as fuck_you ,
(sales_amount - lag(sales_amount,1) over (order by sales_date desc)) as differance
from daily_sales;


-- replace null with zero 
select*,
lag(sales_amount,1,0) over (order by sales_date desc ) as fuck_you,
(sales_amount - lag(sales_amount,1,0) over (order by sales_date desc )) as sales_diff
from daily_sales;

-- differance between lag and lead 

select*,
lag(sales_amount,1,0) over (order by sales_date desc ) as fuck_you,
lead(sales_amount,1,0) over (order by sales_date desc ) as fuck_you_bitch
from daily_sales;  



-- START FROM  370 ROW 
use sql_class_4;
create table emplooyees(
  emp_id int,
  emp_name varchar(50),
  mobile BIGINT,
  dept_name varchar(50),
  salary int 
);

insert into emplooyees values(1,'Shashank',778768768,'Software',1000);
insert into emplooyees values(2,'Rahul',876778877,'IT',2000);
insert into emplooyees values(3,'Amit',098798998,'HR',5000);

insert into emplooyees values(4,'Nikhil',67766767,'IT',3000);

select * from employees;
--- Create views in SQL

create view finance_with_sharan as select EmployeeName , Salary from  employees;

select*from finance_with_sharan;


create view data_analysis as select EmployeeName, sum(Salary) from employees group by Department;


select*from data_analysis;

drop view finance_with_sharan;

# How to use Frame Clause - Rows BETWEEN
select * from daily_sales;

select *,
sum(sales_amount) over (order by sales_date rows between 1 preceding and 1 following) 
as pervi_next_day_sales from daily_sales;

select *,
sum(sales_amount) over (order by sales_date rows between 1 preceding and current row) 
as pervi_next_day_sales from daily_sales;

select *,
sum(sales_amount) over (order by sales_date rows between  current row and 1 following) 
as pervi_next_day_sales from daily_sales;

select *,
sum(sales_amount) over (order by sales_date rows between unbounded preceding and current row) 
as pervi_next_day_sales from daily_sales;

select *,
sum(sales_amount) over (order by sales_date rows between unbounded preceding and unbounded following) 
as pervi_next_day_sales from daily_sales;

select*,
sum(sales_amount) over (order by sales_date rows between  current row and unbounded following) 
as pervi_next_day_sales from daily_sales;

# Alternate way to esclude computation of current row

select *,
sum(sales_amount) over(order by sales_date rows between unbounded preceding and unbounded following) 
- sales_amount as prev_plus_next_sales_sum
from daily_sales;

# How to work with Range Between

select*,
sum(sales_amount) over (order by sales_amount range between 100 preceding and 200 following ) as
pata_nahi_kya_hoga 
from daily_sales;


# Calculate the running sum for a week
# Calculate the running sum for a month



insert into daily_sales values('2022-03-20',900);
insert into daily_sales values('2022-03-23',200);
insert into daily_sales values('2022-03-25',300);
insert into daily_sales values('2022-03-29',250);



select * from daily_sales;

select*,
sum(sales_amount) over 
(order by sales_date range between interval '6' day preceding and current row) as
weekly_sales_from_daily_sales 
from daily_sales;


select*,
sum(sales_amount) over 
(order by sales_date range between interval '6' day preceding and current row) as
weekly_sales_from_daily_sales from daily_sales;
-- (order by sales_date range between 6 preceding and current row ) as 
-- by_range_between_sales 
-- from daily_sales;

use sql_class_4;
-- Common table expression

create table amazon_employees(
    emp_id int,
    emp_name varchar(20),
    dept_id int,
    salary int

 );
 
 
 
 
 
insert into amazon_employees values(1,'Shashank', 100, 10000);
insert into amazon_employees values(2,'Rahul', 100, 20000);
insert into amazon_employees values(3,'Amit', 101, 15000);
insert into amazon_employees values(4,'Mohit', 101, 17000);
insert into amazon_employees values(5,'Nikhil', 102, 30000);

select*from amazon_employees;
create table department
 (
    dept_id int,
    dept_name varchar(20) 
  );
insert into department values(100, 'Software');
    insert into department values(101, 'HR');
      insert into department values(102, 'IT');
        insert into department values(103, 'Finance');

select*from department;

select  d.dept_id , d.dept_name  , temp.total_salary 
from (select dept_id ,sum(salary) as total_salary from amazon_employees group by dept_id) temp
inner join department d on  d.dept_id = temp.dept_id;


select d.dept_id , d.dept_name , sum(a.salary) as total_sales 
from amazon_employees a 
inner join department d on  d.dept_id =  a.dept_id
group by a.dept_id
-- having total_sales = 30000
order by total_sales desc;

-- solving the question by the help of commom table expression   
with dept_salary as (select dept_id , sum(salary) as total_sales  from amazon_employees group by dept_id)

select d.dept_id , temp.total_sales,d.dept_name
from dept_salary temp
inner join department d on d.dept_id = temp.dept_id;

with dept_wise_salary as (select dept_id , sum(salary) as total_salary from amazon_employees group by dept_id),
dept_wise_max_salary as (select dept_id , max(salary) as max_salary from amazon_employees group by dept_id)

select * from dept_wise_max_salary;

select * from dept_wise_salary;


create table emp_mgr
(
id int,
name varchar(50),
manager_id int,
designation varchar(50),
primary key (id)
);

insert into emp_mgr values(1,'Shripath',null,'CEO');
insert into emp_mgr values(2,'Satya',5,'SDE');
insert into emp_mgr values(3,'Jia',5,'DA');
insert into emp_mgr values(4,'David',5,'DS');
insert into emp_mgr values(5,'Michael',7,'Manager');
insert into emp_mgr values(6,'Arvind',7,'Architect');
insert into emp_mgr values(7,'Asha',1,'CTO');
insert into emp_mgr values(8,'Maryam',1,'Manager');

select*from emp_mgr;

CREATE TABLE amployees (
    employee_id INT,
    employee_name VARCHAR(50),
    manager_id INT
);

INSERT INTO amployees VALUES
    (1, 'Alice', NULL),
    (2, 'Bob', 1),
    (3, 'Charlie', 1),
    (4, 'David', 2),
    (5, 'Eve', 3),
    (6, 'Frank', 2);

-- WITH RECURSIVE EmployeeHierarchy AS (
--     SELECT employee_id, employee_name, manager_id, 0 AS level
--     FROM amployees
--     WHERE employee_name = 'Bob'
--     UNION ALL
--     SELECT e.employee_id, e.employee_name, e.manager_id, eh.level + 1
--     FROM amployees e
--     JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id
-- )
-- SELECT * FROM EmployeeHierarchy;

-- use sql_class_4;
-- select*from department;
-- select d.dept_id, temp.total_sales
-- from (select dept_id, sum(salary) as total_sales from amazon_employees group by dept_id) temp
-- inner join  department d on d.dept_id = temp.dept_id;


-- select*from amazon_employees;
-- with dept_wise_salary as (select dept_id , sum(salary) as total_salary from amazon_employees group by dept_id)

-- select d.dept_id, d.total_salary
-- from dept_wise_salary d
-- inner join department e on e.dept_id = d.dept_id;